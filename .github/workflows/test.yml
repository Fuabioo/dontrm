name: Test and Lint

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"
          cache: true

      - name: Run go fmt
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Go code is not formatted:"
            gofmt -d .
            exit 1
          fi

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.5.0

      - name: Run golangci-lint
        run: $(go env GOPATH)/bin/golangci-lint run --timeout=5m

  test:
    name: Test in Docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"
          cache: true

      - name: Build Docker test image
        run: docker build -f Dockerfile.test -t dontrm-test:latest .

      - name: Run tests with coverage
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            dontrm-test:latest \
            go test -v -coverprofile=coverage.out -covermode=atomic ./...

      - name: Check coverage threshold (85%)
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Current coverage: ${COVERAGE}%"

          # Use awk for floating point comparison (85% accounts for untestable main() function)
          MEETS_THRESHOLD=$(awk -v cov="$COVERAGE" 'BEGIN { print (cov >= 85.0) ? "yes" : "no" }')

          if [ "$MEETS_THRESHOLD" = "no" ]; then
            echo "❌ Coverage ${COVERAGE}% is below required 85%"
            exit 1
          else
            echo "✅ Coverage ${COVERAGE}% meets required 85%"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-dontrm
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  e2e-test:
    name: E2E Tests in Docker
    runs-on: ubuntu-latest
    needs: [test, build]  # Run after unit tests and build pass
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build E2E Docker image
        run: docker build -f Dockerfile.e2e -t dontrm-e2e:latest .

      - name: Run E2E tests
        run: docker run --rm dontrm-e2e:latest

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"
          cache: true

      - name: Build binary
        run: go build -ldflags="-s -w" -o dontrm .

      - name: Verify binary
        run: ./dontrm version
